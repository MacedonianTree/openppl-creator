#!/usr/bin/env python3
# use configuration files for projects
import os
import sys
import logging

logging.root.setLevel(logging.INFO)

import argparse

DESCRIPTION = "OpenPPL creator is a program to create a .oppl script from different files."

output_file_name = 'output.oppl'


parser = argparse.ArgumentParser(description=DESCRIPTION)

for debug_arg in ['-d', '--debug']:
    parser.add_argument(debug_arg, dest='debug', action='store_true', help='Set logging level to DEBUG.')



def get_oppl_files(path):
    oppl_files = {}

    logging.debug("Current path: %s", path)

    for filename in os.listdir(current_path):
        if not os.path.isfile(os.path.join(path,filename)): 
            continue

        filename_without_extension, file_extension = os.path.splitext(filename)
        if  file_extension != '.oppl':
            logging.debug("File extension not match: %s", file_extension)
            continue

        logging.debug("Openning file: %s", filename)
        with open(filename, 'r') as file_:
            oppl_files[filename_without_extension] = file_.read()

    return oppl_files


if __name__ == '__main__':
    args = parser.parse_args()
    if args.debug:
        logging.root.setLevel(logging.DEBUG)

    current_path = os.getcwd()

    oppl_files = get_oppl_files(current_path)

    output_path = os.path.join(current_path, 'output')

    if not os.path.exists(output_path):
        os.makedirs(output_path)

    scripts = [script for function, script in oppl_files.items()]
    separator = "\n"
    final_script = separator.join( scripts)

    logging.debug("Creating final file: %s", output_file_name)
    with open(os.path.join(output_path, output_file_name), 'w') as output_file:
        output_file.write(final_script)

